'use client'

import { useEffect, useRef } from 'react'

interface ConversionEvent {\n  event_name: string\n  event_category: 'book_sales' | 'affiliate_clicks' | 'email_signups' | 'user_engagement' | 'ad_performance'\n  event_label?: string\n  value?: number\n  currency?: string\n  custom_parameters?: Record<string, any>\n}\n\ninterface ConversionTrackerProps {\n  enableEnhancedEcommerce?: boolean\n  enableCustomEvents?: boolean\n  enableHeatmaps?: boolean\n  enableUserJourney?: boolean\n}\n\n// Configuración de eventos de conversión\nconst CONVERSION_EVENTS = {\n  // Ventas del libro\n  BOOK_VIEW: 'view_book_landing',\n  BOOK_ADD_TO_CART: 'add_book_to_cart',\n  BOOK_BEGIN_CHECKOUT: 'begin_book_checkout',\n  BOOK_PURCHASE: 'purchase_book',\n  BOOK_PURCHASE_SUCCESS: 'book_purchase_success',\n\n  // Afiliados\n  AFFILIATE_CLICK: 'affiliate_product_click',\n  AFFILIATE_VIEW: 'affiliate_product_view',\n  AFFILIATE_CONVERSION: 'affiliate_conversion_estimate',\n\n  // Email marketing\n  EMAIL_SIGNUP: 'email_signup',\n  EMAIL_YOUTUBE_REDIRECT: 'email_youtube_redirect',\n  EMAIL_NEWSLETTER_CLICK: 'newsletter_click',\n\n  // Engagement del usuario\n  RECIPE_VIEW: 'recipe_view',\n  RECIPE_ENGAGEMENT: 'recipe_engagement',\n  VIDEO_PLAY: 'video_play',\n  SCROLL_DEPTH: 'scroll_depth',\n  TIME_ON_PAGE: 'time_on_page',\n\n  // Anuncios\n  AD_IMPRESSION: 'ad_impression',\n  AD_CLICK: 'ad_click',\n  AD_REVENUE: 'ad_revenue_estimate'\n}\n\nexport default function ConversionTracker({\n  enableEnhancedEcommerce = true,\n  enableCustomEvents = true,\n  enableHeatmaps = false,\n  enableUserJourney = true\n}: ConversionTrackerProps) {\n  const userJourneyRef = useRef<any[]>([])\n  const sessionStartTime = useRef<number>(Date.now())\n  const lastScrollDepth = useRef<number>(0)\n  const timeSpentRef = useRef<number>(0)\n\n  useEffect(() => {\n    // Inicializar tracking mejorado\n    initializeAdvancedTracking()\n    \n    // Configurar Enhanced Ecommerce\n    if (enableEnhancedEcommerce) {\n      configureEnhancedEcommerce()\n    }\n\n    // Configurar tracking de user journey\n    if (enableUserJourney) {\n      trackUserJourney()\n    }\n\n    // Configurar scroll depth tracking\n    setupScrollDepthTracking()\n\n    // Configurar time on page tracking\n    setupTimeOnPageTracking()\n\n    return () => {\n      // Enviar datos finales antes de salir\n      sendFinalAnalytics()\n    }\n  }, [])\n\n  const initializeAdvancedTracking = () => {\n    // Configuración avanzada de Google Analytics 4\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('config', process.env.NEXT_PUBLIC_GA_ID, {\n        // Enhanced measurement\n        enhanced_measurement_settings: {\n          scrolls_enabled: true,\n          outbound_clicks_enabled: true,\n          site_search_enabled: true,\n          video_engagement_enabled: true,\n          file_downloads_enabled: true\n        },\n        // Custom parameters\n        custom_map: {\n          'custom_parameter_1': 'user_type',\n          'custom_parameter_2': 'content_category',\n          'custom_parameter_3': 'conversion_path'\n        },\n        // Conversion linker\n        conversion_linker: true,\n        // Enhanced conversions\n        enhanced_conversions: true\n      })\n    }\n  }\n\n  const configureEnhancedEcommerce = () => {\n    // Configurar Enhanced Ecommerce para el libro\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      // Configurar productos\n      (window as any).gtag('event', 'ecommerce_setup', {\n        event_category: 'ecommerce',\n        items: [{\n          item_id: 'guia-completa-keto-2025',\n          item_name: 'Guía Completa Keto 2025',\n          item_category: 'Digital Books',\n          item_category2: 'Health & Fitness',\n          item_brand: 'Planeta Keto',\n          price: 29.99,\n          currency: 'EUR',\n          quantity: 1\n        }]\n      })\n    }\n  }\n\n  const trackUserJourney = () => {\n    // Rastrear el journey completo del usuario\n    const trackJourneyStep = (step: string, data?: any) => {\n      const journeyEvent = {\n        timestamp: Date.now(),\n        step,\n        page: window.location.pathname,\n        data: data || {},\n        session_duration: Date.now() - sessionStartTime.current\n      }\n\n      userJourneyRef.current.push(journeyEvent)\n\n      // Enviar a GA4\n      if (typeof window !== 'undefined' && (window as any).gtag) {\n        (window as any).gtag('event', 'user_journey_step', {\n          event_category: 'user_engagement',\n          journey_step: step,\n          session_duration: journeyEvent.session_duration,\n          page_path: journeyEvent.page,\n          custom_parameter_3: userJourneyRef.current.length // conversion_path length\n        })\n      }\n    }\n\n    // Tracking automático de eventos importantes\n    window.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement\n      if (target.tagName === 'A' || target.closest('a')) {\n        const link = target.closest('a')\n        if (link) {\n          trackJourneyStep('link_click', {\n            url: link.href,\n            text: link.textContent,\n            is_external: link.hostname !== window.location.hostname\n          })\n        }\n      }\n      \n      if (target.tagName === 'BUTTON' || target.closest('button')) {\n        const button = target.closest('button')\n        if (button) {\n          trackJourneyStep('button_click', {\n            text: button.textContent,\n            class: button.className\n          })\n        }\n      }\n    })\n\n    // Tracking de cambios de página\n    const trackPageView = () => {\n      trackJourneyStep('page_view', {\n        referrer: document.referrer,\n        user_agent: navigator.userAgent\n      })\n    }\n\n    trackPageView()\n  }\n\n  const setupScrollDepthTracking = () => {\n    const scrollThresholds = [25, 50, 75, 90, 100]\n    \n    const handleScroll = () => {\n      const scrollPercent = Math.round(\n        (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100\n      )\n\n      scrollThresholds.forEach(threshold => {\n        if (scrollPercent >= threshold && lastScrollDepth.current < threshold) {\n          lastScrollDepth.current = threshold\n          \n          if (typeof window !== 'undefined' && (window as any).gtag) {\n            (window as any).gtag('event', CONVERSION_EVENTS.SCROLL_DEPTH, {\n              event_category: 'user_engagement',\n              event_label: `${threshold}%`,\n              value: threshold,\n              page_path: window.location.pathname,\n              custom_parameter_1: getUserType(),\n              custom_parameter_2: getContentCategory()\n            })\n          }\n        }\n      })\n    }\n\n    window.addEventListener('scroll', handleScroll)\n  }\n\n  const setupTimeOnPageTracking = () => {\n    const timeThresholds = [10, 30, 60, 120, 300] // segundos\n    \n    const trackTimeSpent = () => {\n      timeSpentRef.current += 10 // incrementar cada 10 segundos\n      \n      timeThresholds.forEach(threshold => {\n        if (timeSpentRef.current >= threshold && timeSpentRef.current < threshold + 10) {\n          if (typeof window !== 'undefined' && (window as any).gtag) {\n            (window as any).gtag('event', CONVERSION_EVENTS.TIME_ON_PAGE, {\n              event_category: 'user_engagement',\n              event_label: `${threshold}s`,\n              value: threshold,\n              page_path: window.location.pathname,\n              engagement_time_msec: threshold * 1000\n            })\n          }\n        }\n      })\n    }\n\n    const timeInterval = setInterval(trackTimeSpent, 10000) // cada 10 segundos\n    \n    return () => clearInterval(timeInterval)\n  }\n\n  const sendFinalAnalytics = () => {\n    // Enviar métricas finales de la sesión\n    const sessionDuration = Date.now() - sessionStartTime.current\n    const maxScrollDepth = lastScrollDepth.current\n    const totalTimeSpent = timeSpentRef.current\n    const journeyLength = userJourneyRef.current.length\n\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', 'session_end', {\n        event_category: 'user_engagement',\n        session_duration: sessionDuration,\n        max_scroll_depth: maxScrollDepth,\n        time_spent: totalTimeSpent,\n        journey_length: journeyLength,\n        bounce: journeyLength <= 2 ? true : false\n      })\n    }\n  }\n\n  const getUserType = (): string => {\n    // Determinar tipo de usuario basado en comportamiento\n    if (userJourneyRef.current.some(event => event.step.includes('book'))) {\n      return 'book_interested'\n    }\n    if (userJourneyRef.current.some(event => event.step.includes('affiliate'))) {\n      return 'affiliate_clicker'\n    }\n    if (userJourneyRef.current.some(event => event.step.includes('recipe'))) {\n      return 'recipe_viewer'\n    }\n    return 'general_visitor'\n  }\n\n  const getContentCategory = (): string => {\n    const path = window.location.pathname\n    if (path.includes('recetas')) return 'recipes'\n    if (path.includes('libro') || path.includes('productos')) return 'products'\n    if (path.includes('blog')) return 'blog'\n    if (path.includes('foro')) return 'forum'\n    return 'general'\n  }\n\n  return null // Este componente no renderiza nada\n}\n\n// Funciones helper para tracking específico\nexport const trackBookConversion = (step: 'view' | 'add_to_cart' | 'begin_checkout' | 'purchase', data?: any) => {\n  if (typeof window === 'undefined' || !(window as any).gtag) return\n\n  const eventMap = {\n    view: CONVERSION_EVENTS.BOOK_VIEW,\n    add_to_cart: CONVERSION_EVENTS.BOOK_ADD_TO_CART,\n    begin_checkout: CONVERSION_EVENTS.BOOK_BEGIN_CHECKOUT,\n    purchase: CONVERSION_EVENTS.BOOK_PURCHASE\n  }\n\n  const baseEvent = {\n    event_category: 'book_sales',\n    currency: 'EUR',\n    value: 29.99,\n    items: [{\n      item_id: 'guia-completa-keto-2025',\n      item_name: 'Guía Completa Keto 2025',\n      item_category: 'Digital Books',\n      price: 29.99,\n      quantity: 1\n    }]\n  }\n\n  ;(window as any).gtag('event', eventMap[step], {\n    ...baseEvent,\n    ...data\n  })\n}\n\nexport const trackAffiliateClick = (productId: string, productName: string, value: number) => {\n  if (typeof window === 'undefined' || !(window as any).gtag) return\n\n  ;(window as any).gtag('event', CONVERSION_EVENTS.AFFILIATE_CLICK, {\n    event_category: 'affiliate_clicks',\n    event_label: productId,\n    product_name: productName,\n    value: value,\n    currency: 'EUR',\n    estimated_commission: value * 0.05 // 5% comisión estimada\n  })\n}\n\nexport const trackEmailSignup = (source: string, leadMagnet: string) => {\n  if (typeof window === 'undefined' || !(window as any).gtag) return\n\n  ;(window as any).gtag('event', CONVERSION_EVENTS.EMAIL_SIGNUP, {\n    event_category: 'email_signups',\n    method: source,\n    lead_magnet: leadMagnet,\n    value: 5, // Valor estimado de un email\n    currency: 'EUR'\n  })\n}\n\nexport const trackRecipeEngagement = (recipeId: string, engagementType: string, value?: number) => {\n  if (typeof window === 'undefined' || !(window as any).gtag) return\n\n  ;(window as any).gtag('event', CONVERSION_EVENTS.RECIPE_ENGAGEMENT, {\n    event_category: 'user_engagement',\n    event_label: recipeId,\n    engagement_type: engagementType,\n    value: value || 1\n  })\n}\n\nexport const trackAdPerformance = (adSlot: string, action: 'impression' | 'click', revenue?: number) => {\n  if (typeof window === 'undefined' || !(window as any).gtag) return\n\n  const eventName = action === 'impression' ? CONVERSION_EVENTS.AD_IMPRESSION : CONVERSION_EVENTS.AD_CLICK\n  \n  ;(window as any).gtag('event', eventName, {\n    event_category: 'ad_performance',\n    ad_slot: adSlot,\n    value: revenue || (action === 'click' ? 0.1 : 0.01), // Estimación\n    currency: 'EUR'\n  })\n}"